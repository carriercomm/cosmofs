package cosmofs

import (
	"crypto/rsa"
	"os"
	"path/filepath"
	"testing"
)

func TestParsePubKey(t *testing.T) {
	keyFileName := filepath.Join(os.Getenv("HOME"), ".ssh", "prueba.pub")

	fi, err := os.Lstat(keyFileName)

	if err != nil {
		t.Fatal("Error: Cannot find SSH Key file.")
	}

	keyFile, err := os.Open(keyFileName)

	if err != nil {
		t.Fatal("Error: Cannot open SSH Key file.")
	}

	defer keyFile.Close()

	buffer := make([]byte, fi.Size())

	keyFile.Read(buffer)

	t.Logf("%s", buffer)

	key, _, id, ok := ParsePubKey(buffer)

	if !ok {
		t.Fatal("Error")
	}

	if string(id) != "roberto@costumero.es" {
		t.Logf("ID: %s", id)
		t.Fail()
	}

	if key.(*rsa.PublicKey).E != 65537 {
		t.Logf("Exponente: %v", key.(*rsa.PublicKey).E)
		t.Fail()
	}

	n := "21476871308241820836495457130896922462861609467609244551275338553530951147779346206911120959395787263818170315296076153906405772858627369975139870414201455839236054784689231466370058456426265257426066637998638400078313717628467583372585506994595235593588895330322211486631806499967636825645365437492932864612687891218428323929757178056350682390274445454428269117946349967972162707044297938667251586264971410091098783715844997330267273383382737940507340834714266891924499879308575496698697593791955409191193506994917275530019544962839682147913246029642907569937457458350268019003658992514431363034493895550765654824631"

	if key.(*rsa.PublicKey).N.String() != n {
		t.Logf("Modulo: %v", key.(*rsa.PublicKey).N)
		t.Fail()
	}
}

func TestParsePrivKey(t *testing.T) {
	keyFileName := filepath.Join(os.Getenv("HOME"), ".ssh", "prueba")

	fi, err := os.Lstat(keyFileName)

	if err != nil {
		t.Fatal("Error: Cannot find SSH Key file.")
	}

	keyFile, err := os.Open(keyFileName)

	if err != nil {
		t.Fatal("Error: Cannot open SSH Key file.")
	}

	defer keyFile.Close()

	buffer := make([]byte, fi.Size())

	keyFile.Read(buffer)

	t.Logf("%s", buffer)

	key, err := ParsePrivateKey(buffer)

	if err != nil {
		t.Fatal("Error:", err)
	}

	n := "21476871308241820836495457130896922462861609467609244551275338553530951147779346206911120959395787263818170315296076153906405772858627369975139870414201455839236054784689231466370058456426265257426066637998638400078313717628467583372585506994595235593588895330322211486631806499967636825645365437492932864612687891218428323929757178056350682390274445454428269117946349967972162707044297938667251586264971410091098783715844997330267273383382737940507340834714266891924499879308575496698697593791955409191193506994917275530019544962839682147913246029642907569937457458350268019003658992514431363034493895550765654824631"

	if key.(*rsa.PrivateKey).N.String() != n {
		t.Logf("PublicKey: %v", key.(*rsa.PrivateKey).PublicKey.N)
		t.Fail()
	}

	if key.(*rsa.PrivateKey).PublicKey.E != 65537 {
		t.Logf("D: %v", key.(*rsa.PrivateKey).PublicKey.E)
		t.Fail()
	}

	d := "4057656293981265935234855885908199855580091374764448571553339975430981538852920712482620500163856110297947492927598378590248505112158385263777436798581601632687197008468835375689977628018829308901072022089798749862973289159950647989980526231092027513005137586097160727947190565369169769369072658910806029107689741378033027422242432336396465020377743804720234640455847883926847907762105902031614338850168022158933646172895781968891104328035734002453379722765731868608084694675418469336083524720252746489123870509542102134087201410503534804535095472696623610337749337146816444998335834127746761327728229483648256953665"

	if key.(*rsa.PrivateKey).D.String() != d {
		t.Logf("Primes: %v", key.(*rsa.PrivateKey).Primes)
		t.Fail()
	}
}
